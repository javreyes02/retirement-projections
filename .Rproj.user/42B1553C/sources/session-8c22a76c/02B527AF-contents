df <- tibble::tibble(
  date = as.Date(c("2020-01-01", "2020-02-01", "2020-03-01", "2020-04-01", "2020-05-01", "2020-06-01", "2020-01-01", "2020-02-01", "2020-03-01", "2020-04-01", "2020-05-01", "2020-06-01", "2020-01-01", "2020-02-01", "2020-03-01", "2020-04-01", "2020-05-01", "2020-06-01")),
  id = c("A", "A", "A", "A", "A", "A", "B", "B", "B", "B", "B", "B", "C", "C", "C", "C", "C", "C"),
  amount = c(1, 9, 5, 5, 6, 2, 10, 4, 8, 10, 6, 5, 5, 1, 6, 5, 5, 5),
  count = c(0, 2, 5, 4, 5, 1, 0, 0, 0, 0, 2, 1, 1, 1, 1, 2, 1, 0),
  amount_cumsum = 0L,
  count_cumsum = 0L,
  condition_met = FALSE
) %>% head(3)


test <- start_model %>%
  filter(flag_pre_retire == 0) %>%
  left_join(post_retire_spend_projections) %>%
  mutate(invest_grow = 0, 
         first_year = ifelse(years == min(years), 1, 0)) %>%
  vctrs::vec_chop() %>%
  accumulate(function(out, new) {
      if (out$first_year == 1) {
        new$invest_grow <- (end_pre_retire_invest*(1 + rr_post_retire)) - out$spend_inflate
      } else {
        new$invest_grow <- (out$invest_grow*(1 + rr_post_retire)) - out$spend_inflate
      }
      new
  }) %>%
  bind_rows()







start_model %>%
  filter(flag_pre_retire == 1) %>%
  left_join(post_retire_spend_projections) %>%
  mutate(new = accumulate(spend_inflate, 
                          .init = tibble(invest_grow = end_pre_retire_invest),
                          ~ tibble(invest_grow = ~(.x$invest_grow*(1 + rr_post_retire)) - .y)[-1]
  )
  )  %>% 
  unnest_wider(new)


df[1:4] %>%
  filter(Scenario != 0) %>%
  mutate(new = accumulate(B, 
                          .init = tibble(C = 4, E = 6),
                          ~ tibble(C = (1 -0.5)* .x$C + 5 + .y + .x$E,
                                   E = 0.5 * .x$C + 5 + .x$E + 2 * .y - 50
                          )
  )[-1]
  ) %>% 
  unnest_wider(new)
test <- vctrs::vec_chop(df) %>%
  accumulate(function(out, new) {
    print("out")
    print(out)
    print('new')
    print(new)
    if (out$amount_cumsum >= 10 && out$count_cumsum >= 3) {
      new$condition_met <- 1L
      new$amount_cumsum <- new$amount
      new$count_cumsum <- new$count
    } else {
      new$condition_met <- 0L
      new$amount_cumsum <- out$amount + new$amount
      new$count_cumsum <- out$count + new$count
    }
    new
  }) %>%
  bind_rows()
